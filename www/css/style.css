html, body{
	overflow-x: hidden; /* prevents horizontal scroll bars */
	-webkit-tap-highlight-color: rgba(0,0,0,0); /* disable webkit tap highlight */
	overflow: -moz-scrollbars-vertical;
	height: 100%; /* fixes focus scrolling in Safari (OS X) */
    
    font: 100%/1.5 "Oswald", sans-serif;
    font-weight: 400;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;   
}

body{
    background:#000;
    background-image: url(../img/jimsanborn.jpg);
    background-position:  center ;
    background-repeat: no-repeat;
    background-size: cover;
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    
    
}

.textcontainer {
/*    width: 80%;*/
/*    margin: 0 auto;*/
/*    padding: 1rem;*/
    font-family: "Oswald", Sans-Serif;
    font-weight: 700;
    font-size: 5rem;
    color: white;
    line-height:100%;
    margin: 0 auto;
    
}


/*it is what it sounds like*/
/*
#rectangle{
    width: 552px;
    height: 50px;
    background: white;
*/
    /*margin-left: auto;
    margin-right: auto;*/
   
    
}




/*make links look good*/
a:link {
    text-decoration: none;
    color: #fff;
}
a:visited {
    text-decoration: none;
    color: #fff;
}
a:hover {
    text-decoration: none;
    color: #fff;
}
a:active {
    text-decoration: none;
    color: #fff;
}




/* Site Overlay*/
.site-overlay{
    display: none;
    }


.menucontainer {
    width: 40rem;
    margin: 0;
    padding: 0rem;
    border: none;
    font-weight: 600;
    font-size: 3rem;
    background-color: #9EAF94;
    color: #fff;
    line-height: 4rem;
    text-align: right;
    z-index: 2;
/*
    border: none;
    border-radius: 10px;
    box-shadow: 0.2rem 0.2rem 0.2rem #000;
*/
}
.sub {
    font-weight: 100;
    font-size: 2rem;
    line-height: 1.6rem;
}

/*horizontal rule*/
hr {
  background: #fff; 
  clear: both; 
  float: none; 
  width: 100%; 
  height: 1px;
  margin: 0 0 0.6em;
  border: none; 
}














/*this is the beginning of the responsive grid design css*/

/*
Use box-sizing: border-box

Place at the top of your CSS file. The * will target all elements on the page.
 
*/
*, *:before, *:after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

/*
Min-width Media Queries

Introduce layout-specific rules only when you need them. Use min-width to layer complexity on your layout as the viewport widens. It’s easier to have all the media queries nearby, rather than at the end of the stylesheet or in a separate document.
*/

html { font-size: 100%; }

@media (min-width: 320px) {
    html { font-size: 50%; }
    #rectangle{
        width: 280px;
        height: 30px;
        background: white;}
}
@media (min-width: 480px) {
    html { font-size: 80%; }
    #rectangle{
        width: 440px;
        height: 30px;
        background: white;}
}
 
@media (min-width: 640px) { 
    html { font-size: 112%; }
    #rectangle{
        width: 620px;
        height: 50px;
        background: white;}
}
@media (min-width: 768px) { 
    html { font-size: 112%; }
    #rectangle{
        width: 620px;
        height: 50px;
        background: white;}
}
@media (min-width: 1024px) { 
    html { font-size: 112%; }
    #rectangle{
        width: 620px;
        height: 50px;
        background: white;}
}

/*
CSS Box Model

It’s important to understand the basics, like how elements are generated and behave in the browser, before diving into responsive web design. The CSS Box Model consists of four distinct parts.

Content
The content of the box, where text and images appear.

Padding
Clears an area around the content.

Border
A border that goes around the padding.

Margin
Clears an area around the border.

What was once a bug is now a widely used CSS property. It basically means you can choose whether or not to include borders and padding in the width of your content.

Without box-sizing: border-box
Margin, borders and padding are drawn outside the set width of your content.
 
With box-sizing: border-box
Borders and padding are drawn inside the set width of your content. The margin is drawn outside.
 
*/

/*
Create a Container

A container holds all elements and controls the page’s maximum width. Using a container will make designing for responsive easier!
*/

.container {
  margin: 0 auto;
  max-width: 48rem;
  width: 90%;
}

/*On larger screens, columns gain float: left in order to stack content horizontally. Columns now use padding for gutters, so you no longer need to worry about removing margins.*/
 

@media (min-width: 40rem) {
  .column {
    float: left;
    padding-left: 1rem;
    padding-right: 1rem;
  }
  
  .column.full { width: 100%; }
  .column.two-thirds { width: 66.7%; }
  .column.half { width: 50%; }
  .column.third { width: 33.3%; }
  .column.fourth { width: 25%; }
  .column.flow-opposite { float: right; }  
}

/*Columns are wrapped in rows to prevent other elements from stacking next to them, otherwise known as clearing issues. Rows are cleared using the popular clearfix, */

.clearfix:before,
.clearfix:after {
  content: " ";
  display: table;
}
 
.clearfix:after {
  clear: both;
}
 
.clearfix {
  *zoom: 1;
}


/*Add the class .flow-opposite to columns where you want content to display first on mobile but appear on the right on larger screens.*/

@media (min-width: 40rem) {
  .column.flow-opposite { float: right; }
}